---

version: "0.2"

branches:
  default:
    stage: pre-merge

models:
- env: &docker_env
    DEVELOPMENT_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s-dev/%(prop:git_slug)s'
    PRODUCTION_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s/%(prop:git_slug)s'

- ShellCommand: &docker_login
    name: Login to docker registry
    command: docker login -u "${HARBOR_LOGIN}" -p "${HARBOR_PASSWORD}" registry.scality.com
    usePTY: true
    env:
      HARBOR_LOGIN: '%(secret:harbor_login)s'
      HARBOR_PASSWORD: '%(secret:harbor_password)s'

- ShellCommand: &wait_docker_daemon
    name: Wait for Docker daemon to be ready
    command: |
      bash -c '
      for i in {1..150}
      do
        docker info &> /dev/null && exit
        sleep 2
      done
      echo "Could not reach Docker daemon from buildbot worker" >&2
      exit 1'
    haltOnFailure: true

- Git: &git
    name: fetch source
    repourl: '%(prop:git_reference)s'
    retryFetch: true
    haltOnFailure: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        stage_names:
        - docker-build

# The docker-build stage will ensure that your images is built on every commit
# and also hosted on the registry to help you pull it up and test it on a real environment if needed.
# It will also allow us to pull it and rename it when performing a release.
  docker-build:
    worker: &docker_worker
      type: kube_pod
      path: eve/workers/docker/pod.yaml
      images:
        worker: eve/workers/docker
    steps:
    - Git: *git
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *docker_login
    - ShellCommand:
        name: docker build
        command: >-
          docker build .
          --tag=${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:commit_short_revision)s
        env: *docker_env
    - ShellCommand:
        name: push docker image into the development namespace
        command: docker push ${DEVELOPMENT_DOCKER_IMAGE_NAME}
        env: *docker_env

# This stage can be used to release your docker image.
# To use this stage:
# 1. Tag the repository
# 2. Force a build with the following parameter:
#    * A given branch that ideally match the tag
#    * Use the release stage
#    * Extra property named tag with the value of the name of the tag itself.
  release:
    worker: *docker_worker
    steps:
    - Git: *git
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *docker_login
    - EvePropertyFromCommand:
        name: get tag short revision
        property: tag_revision
        command: |
          git checkout refs/tags/%(prop:tag)s 2&> /dev/null
          git rev-parse --short HEAD
        haltOnFailure: true
    - ShellCommand:
        name: publish docker image to Scality Production OCI registry
        command: |
          docker pull ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s
          docker tag ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
          docker push ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
        env: *docker_env
